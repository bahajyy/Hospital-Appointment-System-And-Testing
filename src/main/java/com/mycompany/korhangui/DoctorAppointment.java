/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.korhangui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kemer
 */
public class DoctorAppointment extends javax.swing.JFrame {
    
    DefaultTableModel jTable;
    AppointmentControl app_control;

    /**
     * Creates new form DoctorAppointment
     */
    public DoctorAppointment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AppointmentTable = new javax.swing.JTable();
        CancelAppointment = new javax.swing.JToggleButton();
        dayBox = new javax.swing.JComboBox<>();
        monthBox = new javax.swing.JComboBox<>();
        yearText = new javax.swing.JTextField();
        timeBox = new javax.swing.JComboBox<>();
        PatientNames = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PATIENT", "SUBJECT", "DATE", "TIME"
            }
        ));
        jScrollPane1.setViewportView(AppointmentTable);
        try {
            fillTable();
        } catch (ParseException ex) {
            Logger.getLogger(DoctorAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }

        CancelAppointment.setText("Cancel appointment");
        CancelAppointment.setPreferredSize(new java.awt.Dimension(129, 23));
        CancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelAppointmentActionPerformed(evt);
            }
        });

        dayBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JAN", "FEB", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUG", "SEPT", "OCT", "NOV", "DEC" }));
        monthBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthBoxActionPerformed(evt);
            }
        });

        yearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearTextActionPerformed(evt);
            }
        });

        timeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00", "8:30", "9:00", "9:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30" }));
        timeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(PatientNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(CancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(timeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PatientNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        fillPatientNames();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelAppointmentActionPerformed
        DateControl control = new DateControl((yearText.getText()),dayBox.getSelectedItem().toString(),monthBox.getSelectedItem().toString());
        control.assignMonthIndex();

        //--------------------------------------------------------------------------------------------//
        String month = control.monthIndex.get(monthBox.getSelectedItem().toString());
        int day = dayBox.getSelectedIndex()+1;
        int year = Integer.parseInt(yearText.getText());
        String AppointmentDate = Integer.toString(day) + "/" + month + "/" + Integer.toString(year);
        String AppointmentTime = timeBox.getSelectedItem().toString();
        String patientName = PatientNames.getSelectedItem().toString();
        //--------------------------------------------------------------------------------------------//
        DoctorAppointmentControl d_app_control = new DoctorAppointmentControl(patientName, Current_account.username,AppointmentDate,AppointmentTime);
        d_app_control.cancelAppointment();
        try {
            fillTable();
        } catch (ParseException ex) {
            Logger.getLogger(DoctorAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CancelAppointmentActionPerformed

    private void monthBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthBoxActionPerformed

    private void yearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearTextActionPerformed

    private void timeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeBoxActionPerformed

    }//GEN-LAST:event_timeBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorAppointment().setVisible(true);
            }
        });
    }
    
    void fillTable() throws ParseException
    {
        
        
    jTable = (DefaultTableModel)AppointmentTable.getModel();
    
    if(AppointmentTable.getRowCount() != 0)
    {
         jTable.getDataVector().removeAllElements();
         jTable.fireTableDataChanged();
     } 
    
    try
    {
        String filePath = "AppointmentDatabase.txt";
        File file = new File(filePath);
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String s;
        
        while((s=br.readLine())!=null)
        {
            String var[] = s.split(", ");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date curr_date = new Date();
            Date test_date = sdf.parse(var[3]);
            //System.out.println(sdf.format(curr_date));
            //System.out.println(sdf.format(test_date));
        
            boolean dateValid = test_date.compareTo(curr_date) <= 0;
            if(dateValid)
            {
                app_control = new AppointmentControl(var[0],var[1],var[2],var[3],var[4]);
                app_control.cancelAppointment();
                
            }
            else
            {
              if(var[1].equals(Current_account.username))
              {
                String data[] = {var[0],var[2],var[3],var[4]};
                jTable.addRow(data);
              }   
            }
            
            
        }
        
        br.close();
    }
    catch(IOException e)
    {
        e.printStackTrace();
    }
    }
      
    void fillPatientNames()
    { 
    
    try
    {
        String filePath = "AppointmentDatabase.txt";
        File file = new File(filePath);
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String s;
        
        while((s=br.readLine())!=null)
        {
            String var[] = s.split(", ");
            if(var[1].equals(Current_account.username))
            {
               PatientNames.addItem(var[0]);
            }
            
        }
        
        br.close();
    }
    catch(IOException e)
    {
        e.printStackTrace();
    }
    }
    
    String returnSubject()
     {
         String result ="";
           try
      {
        String filePath = "AppointmentDatabase.txt";
        File file = new File(filePath);
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String s;
        
        while((s=br.readLine())!=null)
        {
            String var[] = s.split(", ");
            String doctorName = var[1]; 
            if(doctorName.equals(Current_account.username))
            {
              result = var[2]; 
              return result;
            }
            
                           
        } 
        
        br.close();
        file.delete();
      }
      catch(IOException e)
      {
        e.printStackTrace();
      }
           
      return result;
                
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AppointmentTable;
    private javax.swing.JToggleButton CancelAppointment;
    private javax.swing.JComboBox<String> PatientNames;
    private javax.swing.JComboBox<String> dayBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JComboBox<String> timeBox;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables
}
