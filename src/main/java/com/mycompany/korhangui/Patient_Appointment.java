/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.korhangui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kemer
 */
public class Patient_Appointment extends javax.swing.JFrame {
    DefaultTableModel jTable;
    HashMap<String,Integer> months = new HashMap();
    PrintAppointments p_a ;
    AppointmentControl app_control;
    /**
     * Creates new form Patient_Appointment
     */
    public Patient_Appointment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appointmentButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AppointmentTable = new javax.swing.JTable();
        cancelAppointment = new javax.swing.JRadioButton();
        makeAppointment = new javax.swing.JRadioButton();
        cancelPanel = new javax.swing.JPanel();
        CancelAppointment = new javax.swing.JToggleButton();
        timeBox = new javax.swing.JComboBox<>();
        makePanel = new javax.swing.JPanel();
        MakeAppointment = new javax.swing.JToggleButton();
        DoctorNames = new javax.swing.JComboBox<>();
        dayBox = new javax.swing.JComboBox<>();
        monthBox = new javax.swing.JComboBox<>();
        yearText = new javax.swing.JTextField();
        SubjectBox = new javax.swing.JComboBox<>();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("YOUR CURRENT APPOINTMENTS");

        AppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DOCTOR", "SUBJECT", "DATE", "TIME"
            }
        ));
        jScrollPane1.setViewportView(AppointmentTable);
        try {
            fillTable();
        } catch (ParseException ex) {
            Logger.getLogger(Patient_Appointment.class.getName()).log(Level.SEVERE, null, ex);
        }

        appointmentButtonGroup.add(cancelAppointment);
        cancelAppointment.setText("Cancel appointment");
        cancelAppointment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cancelAppointmentFocusGained(evt);
            }
        });
        cancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAppointmentActionPerformed(evt);
            }
        });

        appointmentButtonGroup.add(makeAppointment);
        makeAppointment.setSelected(true);
        makeAppointment.setText("Make appointment");
        makeAppointment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                makeAppointmentFocusGained(evt);
            }
        });
        makeAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeAppointmentActionPerformed(evt);
            }
        });

        CancelAppointment.setText("Cancel appointment");
        CancelAppointment.setPreferredSize(new java.awt.Dimension(129, 23));
        CancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cancelPanelLayout = new javax.swing.GroupLayout(cancelPanel);
        cancelPanel.setLayout(cancelPanelLayout);
        cancelPanelLayout.setHorizontalGroup(
            cancelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(CancelAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        cancelPanelLayout.setVerticalGroup(
            cancelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(CancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        timeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00", "8:30", "9:00", "9:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30" }));
        timeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeBoxActionPerformed(evt);
            }
        });

        MakeAppointment.setText("Make appointment");
        MakeAppointment.setPreferredSize(new java.awt.Dimension(129, 23));
        MakeAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout makePanelLayout = new javax.swing.GroupLayout(makePanel);
        makePanel.setLayout(makePanelLayout);
        makePanelLayout.setHorizontalGroup(
            makePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 186, Short.MAX_VALUE)
            .addGroup(makePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(makePanelLayout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(MakeAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );
        makePanelLayout.setVerticalGroup(
            makePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
            .addGroup(makePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(makePanelLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(MakeAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        DoctorNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorNamesActionPerformed(evt);
            }
        });

        dayBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JAN", "FEB", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUG", "SEPT", "OCT", "NOV", "DEC" }));
        monthBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthBoxActionPerformed(evt);
            }
        });

        yearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearTextActionPerformed(evt);
            }
        });

        SubjectBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dermatologist", "Surgeon", "Dietician", "Physician" }));
        SubjectBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubjectBoxActionPerformed(evt);
            }
        });

        BackButton.setText("BACK");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cancelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(makePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(DoctorNames, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SubjectBox, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelAppointment)
                            .addComponent(makeAppointment))
                        .addGap(216, 216, 216))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(201, 201, 201))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(makeAppointment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelAppointment)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DoctorNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SubjectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(cancelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(makePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(BackButton)
                .addGap(31, 31, 31))
        );

        cancelPanel.setVisible(false);
        makePanel.setVisible(true);
        try
        {
            String filePath ="DoctorAccountDatabase.txt";
            File file = new File(filePath);
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String s;

            while((s=br.readLine())!=null)
            {
                String var[] = s.split(", ");
                String username = var[0];
                String subject = var[2];
                if(SubjectBox.getSelectedItem().toString().equals(subject))
                DoctorNames.addItem(username);

            }
            br.close();
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monthBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthBoxActionPerformed

    private void timeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeBoxActionPerformed
        
    }//GEN-LAST:event_timeBoxActionPerformed

    private void cancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAppointmentActionPerformed
        makePanel.setVisible(false);
        cancelPanel.setVisible(true);
    }//GEN-LAST:event_cancelAppointmentActionPerformed

    private void makeAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeAppointmentActionPerformed
        makePanel.setVisible(true);
        cancelPanel.setVisible(false);
    }//GEN-LAST:event_makeAppointmentActionPerformed

    private void DoctorNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorNamesActionPerformed
        
    }//GEN-LAST:event_DoctorNamesActionPerformed

    private void MakeAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeAppointmentActionPerformed
    DateControl control = new DateControl((yearText.getText()),dayBox.getSelectedItem().toString(),monthBox.getSelectedItem().toString());
    control.assignMonthIndex();
    boolean dateControl = true;
    //--------------------------------------------------------------------------------------------//
    String month = control.monthIndex.get(monthBox.getSelectedItem().toString());
    int day = dayBox.getSelectedIndex()+1;
    int year = Integer.parseInt(yearText.getText()); 
    String AppointmentDate = Integer.toString(day) + "/" + month + "/" + Integer.toString(year);
    String AppointmentTime = timeBox.getSelectedItem().toString();
    
    
        try {
            
            dateControl = control.dateControlForAppointments();
        } catch (ParseException ex) {
            Logger.getLogger(Patient_Appointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    app_control = new AppointmentControl(Current_account.username, DoctorNames.getSelectedItem().toString(), SubjectBox.getSelectedItem().toString(),AppointmentDate,AppointmentTime);
    if(dateControl && app_control.controlForPatient())
    {
     p_a = new PrintAppointments(Current_account.username, DoctorNames.getSelectedItem().toString(), SubjectBox.getSelectedItem().toString(),AppointmentDate,AppointmentTime);
     p_a.RecordAppointment();
     
        try {
            fillTable();
        } catch (ParseException ex) {
            Logger.getLogger(Patient_Appointment.class.getName()).log(Level.SEVERE, null, ex);
        }
     

    
    }
    
       
    }//GEN-LAST:event_MakeAppointmentActionPerformed

    private void SubjectBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubjectBoxActionPerformed
       try
      {
        String path = "DoctorAccountDatabase.txt";
        File file = new File(path);    
        BufferedReader br = new BufferedReader(new FileReader(path));
        String s;
        
        while((s=br.readLine())!=null)
        {
            String var[] = s.split(", ");
            String doctorname = var[0];
            String subject = var[2]; 
            if(SubjectBox.getSelectedItem().toString().equals(subject))
            DoctorNames.addItem(doctorname);
            else
            DoctorNames.removeItem(doctorname);
            
        } 
        
        br.close();
      }
      catch(IOException e)
      {
        e.printStackTrace();
      }
    }//GEN-LAST:event_SubjectBoxActionPerformed

    private void CancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelAppointmentActionPerformed
    DateControl control = new DateControl((yearText.getText()),dayBox.getSelectedItem().toString(),monthBox.getSelectedItem().toString());
    control.assignMonthIndex();
    
    //--------------------------------------------------------------------------------------------//
    String month = control.monthIndex.get(monthBox.getSelectedItem().toString());
    int day = dayBox.getSelectedIndex()+1;
    int year = Integer.parseInt(yearText.getText()); 
    String AppointmentDate = Integer.toString(day) + "/" + month + "/" + Integer.toString(year);
    String AppointmentTime = timeBox.getSelectedItem().toString();
    //--------------------------------------------------------------------------------------------//
    app_control = new AppointmentControl(Current_account.username, DoctorNames.getSelectedItem().toString(), SubjectBox.getSelectedItem().toString(),AppointmentDate,AppointmentTime);
    app_control.cancelAppointment();
        try {
            fillTable();
        } catch (ParseException ex) {
            Logger.getLogger(Patient_Appointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CancelAppointmentActionPerformed

    private void makeAppointmentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_makeAppointmentFocusGained
        
    }//GEN-LAST:event_makeAppointmentFocusGained

    private void cancelAppointmentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cancelAppointmentFocusGained
        
    }//GEN-LAST:event_cancelAppointmentFocusGained

    private void yearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearTextActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
       this.toBack();
       this.setVisible(false);
       PatientAccount p_a = new PatientAccount();
       p_a.setVisible(true);
       p_a.toFront();
    }//GEN-LAST:event_BackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Patient_Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Patient_Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Patient_Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Patient_Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Patient_Appointment().setVisible(true);
            }
        });
    }
    
    void fillTable() throws ParseException
    {   
    
    //--------------------------------------------------------------------------------------------//
    
    
        
    jTable = (DefaultTableModel)AppointmentTable.getModel();
    
    if(AppointmentTable.getRowCount() != 0)
    {
         jTable.getDataVector().removeAllElements();
         jTable.fireTableDataChanged();
     } 
    
    try
    {
        String filePath ="AppointmentDatabase.txt";
        File file = new File(filePath);
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String s;
        
        while((s=br.readLine())!=null)
        {
            String var[] = s.split(", ");
            String patientName = var[0];
             
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date curr_date = new Date();
            Date test_date = sdf.parse(var[3]);
        
            boolean dateValid = test_date.compareTo(curr_date) <= 0;
        
            if(dateValid)
            {
                app_control = new AppointmentControl(var[0],var[1],var[2],var[3],var[4]);
                app_control.cancelAppointment();
                
            }
            else
            {
               if(patientName.equals(Current_account.username))
              {
                String data[] ={var[1],var[2],var[3],var[4]};
                jTable.addRow(data);
              }
                
            }
                           
            
        }
        
        br.close();
    }
    catch(IOException e)
    {
        e.printStackTrace();
    }
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AppointmentTable;
    private javax.swing.JButton BackButton;
    private javax.swing.JToggleButton CancelAppointment;
    private javax.swing.JComboBox<String> DoctorNames;
    private javax.swing.JToggleButton MakeAppointment;
    private javax.swing.JComboBox<String> SubjectBox;
    private javax.swing.ButtonGroup appointmentButtonGroup;
    private javax.swing.JRadioButton cancelAppointment;
    private javax.swing.JPanel cancelPanel;
    private javax.swing.JComboBox<String> dayBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton makeAppointment;
    private javax.swing.JPanel makePanel;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JComboBox<String> timeBox;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables
}
